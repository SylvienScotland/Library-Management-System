
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.*;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;

/** Sylvien Scotland CEN 3024C 7/14/24
 * Book class to represent a book in the library.
 * This class includes details like the book's ID, title, author, check-out status, and due date.
 * It provides methods to check out and check in a book, and also methods to retrieve book details.
 */
class Book {
    private String id;
    private String title;
    private String author;
    private String genre;
    private boolean checkedOut;
    private String dueDate;

    /**
     * Constructs a new Book.
     * @param id the unique identifier for the book.
     * @param title the title of the book.
     * @param author the author of the book.
     * @param genre the genre of the book.
     * @param checkedOut the check-out status of the book.
     * @param dueDate the due date for returning the book, if checked out.
     */
    public Book(String id, String title, String author, String genre, boolean checkedOut, String dueDate) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.genre = genre;
        this.checkedOut = checkedOut;
        this.dueDate = dueDate;
    }

    /**
     * Gets the ID of the book.
     * @return the book ID.
     */
    public String getId() {
        return id;
    }

    /**
     * Gets the title of the book.
     * @return the book title.
     */
    public String getTitle() {
        return title;
    }

    /**
     * Gets the author of the book.
     * @return the book author.
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Gets the genre of the book.
     * @return the book genre.
     */
    public String getGenre() {
        return genre;
    }

    /**
     * Checks if the book is checked out.
     * @return true if the book is checked out, false otherwise.
     */
    public boolean isCheckedOut() {
        return checkedOut;
    }

    /**
     * Gets the due date for returning the book.
     * @return the due date as a string.
     */
    public String getDueDate() {
        return dueDate;
    }

    @Override
    public String toString() {
        return "Book{" +
                "id='" + id + '\'' +
                ", title='" + title + '\'' +
                ", author='" + author + '\'' +
                ", genre='" + genre + '\'' +
                ", checkedOut=" + checkedOut +
                ", dueDate='" + dueDate + '\'' +
                '}';
    }
}


/** Sylvien Scotland CEN 3024C 7/16/24
 * Library class to manage a collection of books.
 * This class handles adding, removing, listing, checking out, and checking in books.
 * It manages persistence by using a SQLite database.
 */
class Library {
    private final Connection connection;

    /**
     * Constructs a new Library connected to the specified database URL.
     * @param dbUrl the database URL.
     * @throws SQLException if a database access error occurs.
     */
    public Library(String dbUrl) throws SQLException {
        this.connection = DriverManager.getConnection(dbUrl);
    }

    /**
     * Adds a book to the library.
     * @param book the book to add.
     */
    public void addBook(Book book) {
        String query = "INSERT INTO books (barcode, title, author, genre, status, due_date) VALUES (?, ?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, book.getId());
            stmt.setString(2, book.getTitle());
            stmt.setString(3, book.getAuthor());
            stmt.setString(4, book.getGenre());
            stmt.setString(5, book.isCheckedOut() ? "Checked Out" : "Checked In");
            stmt.setString(6, book.getDueDate());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Removes a book from the library by its barcode.
     * @param barcode the barcode of the book to remove.
     */
    public void removeBook(String barcode) {
        String query = "DELETE FROM books WHERE barcode = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, barcode);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Removes a book from the library by its title.
     * @param title the title of the book to remove.
     */
    public void removeBookByTitle(String title) {
        String query = "DELETE FROM books WHERE title = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, title);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Gets a list of all books in the library.
     * @return a list of books.
     */
    public List<Book> getBooks() {
        List<Book> books = new ArrayList<>();
        String query = "SELECT * FROM books";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Book book = new Book(
                        rs.getString("barcode"),
                        rs.getString("title"),
                        rs.getString("author"),
                        rs.getString("genre"),
                        rs.getString("status").equals("Checked Out"),
                        rs.getString("due_date")
                );
                books.add(book);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return books;
    }

    /**
     * Checks out a book from the library by its title.
     * @param title the title of the book to check out.
     * @return a message indicating the result of the operation.
     */
    public String checkOutBook(String title) {
        String query = "UPDATE books SET status = 'Checked Out', due_date = ? WHERE title = ? AND status = 'Checked In'";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String dueDate = sdf.format(new Date(System.currentTimeMillis() + 4 * 7 * 24 * 60 * 60 * 1000L)); // 4 weeks from now
            stmt.setString(1, dueDate);
            stmt.setString(2, title);
            int rowsUpdated = stmt.executeUpdate();
            if (rowsUpdated == 0) {
                return "Book with title '" + title + "' not found or already checked out.";
            } else {
                return "Book with title '" + title + "' checked out successfully.";
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return "Error checking out the book.";
        }
    }

    /**
     * Checks in a book to the library by its title.
     * @param title the title of the book to check in.
     * @return a message indicating the result of the operation.
     */
    public String checkInBook(String title) {
        String query = "UPDATE books SET status = 'Checked In', due_date = NULL WHERE title = ? AND status = 'Checked Out'";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, title);
            int rowsUpdated = stmt.executeUpdate();
            if (rowsUpdated == 0) {
                return "Book with title '" + title + "' not found or already checked in.";
            } else {
                return "Book with title '" + title + "' checked in successfully.";
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return "Error checking in the book.";
        }
    }
}
/** Sylvien Scotland CEN 3024C 7/16/24
 * Main class to test the Library Management System.
 * The objective of this program is to manage a library system where users can add, remove, check out, and check in books.
 * The system will read from and write to a SQLite database to persist the library data.
 */
public class LibraryManagementSystem {
    public static void main(String[] args) {
        Library library;
        try {
            library = new Library("jdbc:sqlite:C:\\Users\\truga\\Downloads\\sqlite-tools-win-x64-3460000\\LibraryDB.db");
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Choose an option:");
            System.out.println("1. Add a book manually");
            System.out.println("2. Remove a book by barcode");
            System.out.println("3. Remove a book by title");
            System.out.println("4. Check out a book by title");
            System.out.println("5. Check in a book by title");
            System.out.println("6. List all books");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    System.out.print("Enter book title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter book author: ");
                    String author = scanner.nextLine();
                    System.out.print("Enter book genre: ");
                    String genre = scanner.nextLine();
                    String barcode = String.valueOf(System.currentTimeMillis()); // Using current time as a unique barcode
                    Book newBook = new Book(barcode, title, author, genre, false, null);
                    library.addBook(newBook);
                    break;
                case "2":
                    System.out.print("Enter book barcode: ");
                    String barcodeToRemove = scanner.nextLine();
                    library.removeBook(barcodeToRemove);
                    break;
                case "3":
                    System.out.print("Enter book title: ");
                    String titleToRemove = scanner.nextLine();
                    library.removeBookByTitle(titleToRemove);
                    break;
                case "4":
                    System.out.print("Enter book title: ");
                    String titleToCheckOut = scanner.nextLine();
                    System.out.println(library.checkOutBook(titleToCheckOut));
                    break;
                case "5":
                    System.out.print("Enter book title: ");
                    String titleToCheckIn = scanner.nextLine();
                    System.out.println(library.checkInBook(titleToCheckIn));
                    break;
                case "6":
                    List<Book> books = library.getBooks();
                    for (Book book : books) {
                        System.out.println(book);
                    }
                    break;
                case "7":
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }
}
